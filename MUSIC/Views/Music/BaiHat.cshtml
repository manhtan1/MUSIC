@model IEnumerable<MUSIC.Models.BAIHAT>
    @using MUSIC.Models;
@{
    ViewBag.Title = "BaiHat";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Music player</title>
<link rel="preconnect" href="https://fonts.gstatic.com">
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
<div class="backgraoundnen">
    <div class="player">
        <!-- Dashboard -->
        <!-- Header -->
        @foreach (var item in Model)
        {
            @*List<Listening> listenings = Session["Listen"] as List<Listening>;
            Listening nhac = listenings.Find(n => n.idbaihat == item.idbaihat);
            nhac = new Listening(item.idbaihat);*@

            <div class="dashboard">

                <header>

                    <h4>@item.casi</h4>

                    <h2>@item.tenbaihat</h2>

                </header>


                <!-- CD -->

                <div class="cd">
                    <div class="cd-thumb" style=" background-image: url(@item.hinhbaihat)">
                    </div>
                </div>

                <!-- Control -->
                <div class="control">
                    <div class="btn btn-repeatt">
                        <i class="fas fa-redo"></i>
                    </div>
                    @*<form action="/music/prevsong/@item.idbaihat" method="post">
                        <button class="btn  btn-song-next-prev" type="submit">
                            <i class="fas fa-step-backward"></i>
                        </button>
                    </form>*@
                    <div onclick="prevnext(@item.idbaihat)" class="btn  btn-song-next-prev">
                        <i class="fas fa-step-backward"></i>
                    </div>
                    <div class="btn btn-toggle-play">
                        <i class="fas fa-pause icon-pause"></i>
                        <i class="fas fa-play icon-play"></i>
                    </div>
                    @*<form action="/music/nextsong/@item.idbaihat" method="post">
            <button class="btn  btn-song-next-prev" type="submit">
                <i class="fas fa-step-forward"></i>
            </button>

        </form>*@
                    <div onclick="songnext(@item.idbaihat)" class="btn  btn-song-next-prev">
                        <i class="fas fa-step-forward"></i>
                    </div>
                    <div class="btn btn-randomm ">
                        <i class="fas fa-random"></i>
                    </div>


                </div>

                <input id="progress" class="progress" type="range" value="0" step="1" min="0" max="100">

                <audio id="audio" for="progress" hidden controls>
                    <source src="@item.linkbaihat">
                </audio>

            </div>
        }
        <!-- Playlist -->
        <div class="playlist">
            @{
                MUSIC.Models.DBcontent db = new MUSIC.Models.DBcontent();
                int stt = 1;
            }
            @foreach (var item in db.BAIHATs.ToList())
            {
            <a class="song " onclick="loadsong(@item.idbaihat)">
                <span>@stt</span>
                @*href="@Url.Action("ThemNhac", "Listened", new { @id = item.idbaihat, @strURL = Request.Url.ToString() })"*@
                <div class="thumb"
                     style="background-image: url('@item.hinhbaihat')">
                </div>
                <div class="body">
                    <h3 class="title">@item.tenbaihat</h3>
                    <p class="author">@item.casi</p>
                </div>
                <div class="option">
                    <i class="fas fa-ellipsis-h"></i>
                </div>

            </a>

                stt++;

            }
        </div>
    </div>
</div>

<!-- Design from: https://static.collectui.com/shots/3671744/musicloud-revolutionary-app-for-music-streaming-large -->
<style>
    .btn-song-next-prev {
        border: none;
        background: #fff;
    }

    :root {
                    --primary-color: #ec1f55;
        --text-color: #333;
    }
    .backgraoundnen {
                    background-image: url(/images/nenbody.jpg);
                    background-repeat: none;
                }

                * {
                padding: 0;
                margin: 0;
                    box-sizing: inherit;
                }

    .player {
                position: relative;
                    max-width: 480px;
                margin: 0 auto;

                }

        .player .icon-pause {
                display: none;
                }

        .player.playing .icon-pause {
                display: inline-block;
                }

        .player.playing .icon-play {
                display: none;
                }

    .dashboard {
                padding: 16px 16px 14px;
                    background-color: #fff;
        top: 0;
                width: 100%;
                    max-width: 480px;
                    border-bottom: 1px solid #ebebeb;
    }

                /* HEADER */
                header {
                    text-align: center;
                    margin-bottom: 10px;
                }

                header h4 {
                    color: var(--primary-color);
                    font-size: 12px;
                }

                header h2 {
                    color: var(--text-color);
                    font-size: 20px;
                }

    /* CD */
    .cd {
                display: flex;
                margin: auto;
                width: 200px;
                }

    .cd-thumb {
                width: 100%;
                    padding-top: 100%;
                    border-radius: 50%;
                    background-color: #333;
        background-size: cover;
                margin: auto;
                }

    /* CONTROL */
    .control {
                display: flex;
                    align-items: center;
                    justify-content: space-around;
                padding: 18px 0 8px 0;
                }
        .control div{
            cursor:pointer;
        }

        .control .btn {
            color: #666;
            padding: 18px;
            font-size: 18px;
        }

            .control .btn.active {
                color: var(--primary-color);
                }

        .control .btn-toggle-play {
            max-width: 56px;
            max-height: 56px;
            border-radius: 50%;
            font-size: 24px;
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: var(--primary-color);

                }

    .progress {
                width: 100%;
                    -webkit-appearance: none;
                height: 6px;
                background: #d3d3d3;
        outline: none;
                opacity: 0.7;
                    -webkit-transition: 0.2s;
                transition: opacity 0.2s;
                }

        .progress::-webkit-slider-thumb {
                    -webkit-appearance: none;
                appearance: none;
                width: 12px;
                height: 6px;
                    background-color: var(--primary-color);
                cursor: pointer;
                }

    /* PLAYLIST */
    .playlist {
       @* padding: 12px;*@
        min-width:512px;
        margin:12px 0;
    }

    .song {
        display: flex;
        align-items: center;
        margin-bottom: 12px;
        background-color: #fff;
        padding: 8px 16px;
        border-radius: 5px;
        box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1);
    }

        .song.active {
            background-color: var(--primary-color);
        }

        .song:active {
            opacity: 0.8;
        }

        .song.active .option,
        .song.active .author,
        .song.active .title {
            color: #fff;
        }

        .song .thumb {
            width: 44px;
            height: 44px;
            border-radius: 50%;
            background-size: cover;
            margin: 0 8px;
        }

        .song .body {
            flex: 1;
            padding: 0 16px;
        }

        .song .title {
            font-size: 18px;
            color: var(--text-color);
        }

        .song .author {
            font-size: 12px;
            color: #999;
        }

        .song .option {
            padding: 16px 8px;
            color: #999;
            font-size: 18px;
        }
    .playlist a {
        text-decoration: none;
    }
</style>
<script type="text/javascript" src="http://www.google.com/jsapi?key=INSERT-YOUR-KEY"></script>
@*<script type="text/javascript">
        $(document).ready(function ($) {
            $('.song').on('click', function (e) {
                var id = $(this).data('id');
                $.ajax({
                    url: '/Music/Baihat/id}',
                    type: 'GETS',
                    data: { id: id },
                    success: function (rs) {
                        rs.success;
                    }
                });
            })
        });
    </script>*@
@*<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>*@
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>
    const PlAYER_STORAGE_KEY = "F8_PLAYER";
    const pl = document.querySelector(".btn-song-next-prev");
    const player = document.querySelector(".player");
    const cd = document.querySelector(".cd");
    const heading = document.querySelector("header h2");
    const cdThumb = document.querySelector(".cd-thumb");
    const audio = document.querySelector("#audio");
    const playBtn = document.querySelector(".btn-toggle-play");
    const progress = document.querySelector("#progress");
    const prevBtn = document.querySelector(".btn-prev");
    const nextBtn = document.querySelector(".btn-next");
    const randomBtn = document.querySelector(".btn-randomm");
    const repeatBtn = document.querySelector(".btn-repeatt");
    const playlist = document.querySelector(".playlist");
    const song = document.querySelector(".song");
    isRandom: false;
    isRepeat: false;
    function loadsong(id) {
        window.location.replace("/Music/Baihat/" + id);
    }
    function prevnext(id) {
        @{
            MUSIC.Models.DBcontent db1 = new MUSIC.Models.DBcontent();
            var song = db.BAIHATs.ToList();
        }
        const hasrandomActive = document.querySelector(".btn-randomm").classList.contains("active");
        const hasrepeatActive = document.querySelector(".btn-repeatt").classList.contains("active");

        if (hasrepeatActive) {
            if (id < 1) {
                id = 12;
            }
            window.location.replace("/Music/Baihat/" + id);

        }
        else {
            if (hasrandomActive) {
                let newIndex;
                if ( newIndex = 0) {
                    newIndex = Math.floor(Math.random() * @song.Count);
                }
                else {
                    newIndex = Math.floor(Math.random() * @song.Count);
                }
                window.location.replace("/Music/Baihat/" + newIndex);
            }
            else {
                id -= 1;
                if (id <1) {
                    id = 12;
                }
                window.location.replace("/Music/Baihat/" + id);
            }
        }

    }
    function songnext(id) {

        const hasrandomActive = document.querySelector(".btn-randomm").classList.contains("active");
        const hasrepeatActive = document.querySelector(".btn-repeatt").classList.contains("active");

        if (hasrepeatActive) {
            if (id >@song.Count) {
                id = 1;
            }
            window.location.replace("/Music/Baihat/" + id);

        }
        else {
            if (hasrandomActive) {
            let newIndex;
            if ( newIndex = 0) {
                newIndex = Math.floor(Math.random() * @song.Count);
            }
            else {
                newIndex = Math.floor(Math.random() * @song.Count);
            }
            window.location.replace("/Music/Baihat/" + newIndex);

        }
        else {
            id += 1;
            if (id >@song.Count) {
                id = 1;
            }
            window.location.replace("/Music/Baihat/" + id);
        }
        }


    }

    repeatBtn.onclick = function (e) {
        isRepeat: false;
        this.isRepeat = !this.isRepeat
        repeatBtn.classList.toggle('active', this.isRepeat);
    }
    randomBtn.onclick = function (e) {
        this.isRandom = !this.isRandom
        randomBtn.classList.toggle('active', this.isRandom);
    }


    const app = {
        currentIndex: 0,
        isPlaying: false,
        isRandom: false,
        isRepeat: false,
        config: {},

        setConfig: function (key, value) {
            this.config[key] = value;
            // (2/2) Uncomment the line below to use localStorage
            // localStorage.setItem(PlAYER_STORAGE_KEY, JSON.stringify(this.config));
        },

        defineProperties: function () {
            Object.defineProperty(this, "currentSong", {
                get: function () {
                    return this.songs[this.currentIndex];
                }
            });
        },
        handleEvents: function () {
            const _this = this;
            const cdWidth = cd.offsetWidth;

            // Xử lý CD quay / dừng
            // Handle CD spins / stops
            const cdThumbAnimate = cdThumb.animate([{ transform: "rotate(360deg)" }], {
                duration: 10000, // 10 seconds
                iterations: Infinity
            });
            cdThumbAnimate.pause();

            // Xử lý phóng to / thu nhỏ CD
            // Handles CD enlargement / reduction
            document.onscroll = function () {
                const scrollTop = window.scrollY || document.documentElement.scrollTop;
                const newCdWidth = cdWidth - scrollTop;

                cd.style.width = newCdWidth > 0 ? newCdWidth + "px" : 0;
                cd.style.opacity = newCdWidth / cdWidth;
            };

            // Xử lý khi click play
            // Handle when click play
            playBtn.onclick = function () {
                if (_this.isPlaying) {
                    audio.pause();
                } else {
                    audio.play();
                }
            };

            // Khi song được play
            // When the song is played
            audio.onplay = function () {
                _this.isPlaying = true;
                player.classList.add("playing");
                cdThumbAnimate.play();
            };

            // Khi song bị pause
            // When the song is pause
            audio.onpause = function () {
                _this.isPlaying = false;
                player.classList.remove("playing");
                cdThumbAnimate.pause();
            };

            // Khi tiến độ bài hát thay đổi
            // When the song progress changes
            audio.ontimeupdate = function () {
                if (audio.duration) {
                    const progressPercent = Math.floor(
                        (audio.currentTime / audio.duration) * 100
                    );
                    progress.value = progressPercent;
                }
            };

            // Xử lý khi tua song
            // Handling when seek
            progress.onchange = function (e) {
                const seekTime = (audio.duration / 100) * e.target.value;
                audio.currentTime = seekTime;
            };

            // Khi next song
            // When next song
            nextBtn.onclick = function () {
                if (_this.isRandom) {
                    _this.playRandomSong();
                } else {
                    _this.nextSong();
                }
                audio.play();
                _this.render();
                _this.scrollToActiveSong();
            };

            // Khi prev song
            // When prev song
            prevBtn.onclick = function () {
                if (_this.isRandom) {
                    _this.playRandomSong();
                } else {
                    _this.prevSong();
                }
                audio.play();
                _this.render();
                _this.scrollToActiveSong();
            };


            // Xử lý bật / tắt random song
            // Handling on / off random song
            randomBtn.onclick = function (e) {
                _this.isRandom = !_this.isRandom
                randomBtn.classList.toggle("active", _this.isRandom);
            };

            // Xử lý lặp lại một song
            // Single-parallel repeat processing
            repeatBtn.onclick = function (e) {
                _this.isRepeat = !_this.isRepeat;
                _this.setConfig("isRepeat", _this.isRepeat);
                repeatBtn.classList.toggle("active", _this.isRepeat);
            };

            // Xử lý next song khi audio ended
            // Handle next song when audio ended
            audio.onended = function () {
                if (_this.isRepeat) {
                    audio.play();
                } else {
                    nextBtn.click();
                }
            };

            // Lắng nghe hành vi click vào playlist
            // Listen to playlist clicks
            playlist.onclick = function (e) {
                const songNode = e.target.closest(".song:not(.active)");

                if (songNode || e.target.closest(".option")) {
                    // Xử lý khi click vào song
                    // Handle when clicking on the song
                    if (songNode) {
                        _this.currentIndex = Number(songNode.dataset.index);
                        _this.loadCurrentSong();
                        _this.render();
                        audio.play();
                    }

                    // Xử lý khi click vào song option
                    // Handle when clicking on the song option
                    if (e.target.closest(".option")) {
                    }
                }
            };
        },
        scrollToActiveSong: function () {
            setTimeout(() => {
                $(".song.active").scrollIntoView({
                    behavior: "smooth",
                    block: "nearest"
                });
            }, 300);
        },
        loadCurrentSong: function () {
            @*if (@bAIHAT.idbaihat== this.currentIndex) {
                heading.textContent =@bAIHAT.tenbaihat;
                cdThumb.style.backgroundImage = `url('${@bAIHAT.hinhbaihat}')`;
                audio.src = @bAIHAT.linkbaihat;
            }*@-->-->
            heading.textContent = this.currentSong.name;
            cdThumb.style.backgroundImage = `url('${this.currentSong.image}')`;
            audio.src = this.currentSong.path;

        },
        loadConfig: function () {
            this.isRandom = this.config.isRandom;
            this.isRepeat = this.config.isRepeat;
        },
        nextSong: function () {
            this.currentIndex++;
            @{
                var songs = db.BAIHATs.ToList();
            }
            if (this.currentIndex >= @songs.Count) {
                this.currentIndex = 0;
            }
            this.loadCurrentSong();
        },
        prevSong: function () {
            this.currentIndex--;
            if (this.currentIndex < 0) {
                this.currentIndex = this.songs.length - 1;
            }
            this.loadCurrentSong();
        },
        playRandomSong: function () {
            let newIndex;
            do {
                newIndex = Math.floor(Math.random() * this.songs.length);
            } while (newIndex === this.currentIndex);

            this.currentIndex = newIndex;
            this.loadCurrentSong();
        },
        start: function () {

            this.loadConfig();
            this.defineProperties();
            this.handleEvents();
            this.loadCurrentSong();
            this.render();
            randomBtn.classList.toggle("active", this.isRandom);
            repeatBtn.classList.toggle("active", this.isRepeat);
        }
    };

    app.start();
</script>

